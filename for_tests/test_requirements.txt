## 1. Цель фичи

* Обеспечить пользователям быстрый и интуитивный поиск товаров и информации в каталоге Леруа Мерлен.
* Увеличить конверсию из поиска в покупку не менее чем на 15% в течение первых трёх месяцев после запуска.

## 2. Пользовательские истории

1. Как покупатель, я хочу вводить название товара или артикул и получать релевантные результаты, чтобы быстро найти нужный товар.
2. Как любитель «быстрых решений», я хочу видеть подсказки (автозаполнение) уже после ввода первых двух символов, чтобы сократить время ввода.
3. Как пользователь, я хочу иметь возможность фильтровать результаты по цене, наличию в конкретном магазине и бренду, чтобы сразу отфильтровать неподходящие варианты.
4. Как постоянный клиент, я хочу видеть историю своих последних 10 поисковых запросов, чтобы при необходимости повторно обратиться к часто искомым товарным позициям.
5. Как пользователь, я хочу обработку опечаток (фаззик-поиск) и поиск по похожим названиям, чтобы не пропустить нужный товар при небольших ошибках в запросе.

## 3. Функциональные требования

* **Поле поиска**

  * Доступно на всех ключевых экранах (главная, каталог, корзина) в шапке приложения.
  * Поддержка ввода не менее 50 символов.

* **Автозаполнение и подсказки**

  * Подача подсказок должно начинаться после ввода ≥ 2 символов.
  * Время отклика на запрос автозаполнения ≤ 200 мс при нагрузке до 500 RPS.
  * Отображать до 5 подсказок: 3 товара + 2 категории.

* **Результаты поиска**

  * Возвращать не более 50 результатов на страницу.
  * Поддержка сортировки по релевантности, цене (возрастание/убывание), рейтингу.
  * Индикация наличия на складе выбранного магазина в реальном времени (обновление каждые 60 с).

* **Фильтрация и фасетный поиск**

  * Фильтры: цена (диапазон), бренд (число выбираемых брендов ≤ 10), категория, рейтинг (от 1 до 5 звезд), наличие.
  * Сброс всех фильтров одной кнопкой.

* **История поиска**

  * Хранение последних 10 запросов в локальной БД приложения.
  * Возможность быстрого удаления каждого элемента истории свайпом влево.

* **Обработка опечаток**

  * Поддержка Levenshtein-distance ≤ 2 для корректировки ошибок.
  * При отсутствии точных совпадений предлагать «Показать результаты по запросу “…”?».

* **Голосовой поиск (опционально)**

  * Иконка микрофона; запуск распознавания речи с точностью ≥ 90%.

## 4. Нефункциональные требования

* **Производительность**

  * Общий TTFB (Time To First Byte) при запросе поиска ≤ 300 мс.
  * SLA: 99,9% доступности поискового API.

* **Масштабируемость**

  * Поддержка пиковых нагрузок до 1 000 запросов в секунду без деградации качества.

* **Надёжность и отказоустойчивость**

  * Резервирование поисковых узлов (min. 3 ноды).
  * Автоматическое переключение на резервный кластер при сбое.

* **Безопасность**

  * HTTPS для всех запросов.
  * Защита от SQL/NoSQL-инъекций в поисковых запросах.

* **Локализация**

  * Поддержка русского языка с учетом морфологии (eg. «жидкие обои», «жидкие-обои»).

## 5. Критерии приёмки

* **Функциональные тесты**

  * Пользователь вводит «стул» → получает товары с «стул» в названии ≥ 80% релевантности.
  * Автозаполнение после двух символов показывает соответствующие подсказки.
  * Применение фильтра «цена от 500 до 2000 руб.» возвращает только товары в заданном диапазоне.

* **Нагрузочные тесты**

  * При 500 RPS среднее время отклика ≤ 250 мс.
  * При 1 000 RPS среднее время отклика ≤ 350 мс.

* **UX-тесты**

  * Пользователи выполняют базовый поиск менее чем за 10 секунд с первого шага.
  * Положительные оценки удобства поиска ≥ 4 из 5 при тестировании на фокус-группе (n=20).

## 6. UX-дизайн и интерфейс

* **Поисковая строка**

  * Располагается в верхней части экрана, занимает ≥ 90% ширины.
  * Иконка «лупа» слева, иконка «крестик» для очистки текста справа.

* **Список результатов**

  * Карточки товаров с изображением, названием, ценой, рейтингом, индикацией наличия.
  * Плавная подгрузка (infinite scroll) или пагинация.

* **Модуль фильтров**

  * Выезжающая панель справа с чекбоксами и слайдерами.
  * Кнопка «Применить» и «Сбросить».

## 7. Метрики и аналитика

* Время от ввода запроса до первой выдачи (TTFB).
* Конверсия из поиска в просмотр карточки товара.
* Конверсия из просмотра карточки товара в «Добавить в корзину».
* Пульс-метрика: процент пользователей, использующих поиск в сессии.

### 8. API для поиска

Для интеграции мобильного приложения Леруа Мерлен с бэкендом поиска реализуется RESTful API.

**8.1. Общие принципы**

* Версионирование: все эндпоинты начинаются с `/api/v1/search/`.
* Аутентификация: JWT-токен в заголовке `Authorization: Bearer <token>`.
* Формат запросов и ответов: JSON.
* Кодировка: UTF-8.

**8.2. Эндпоинты**

| Метод  | Путь                          | Описание                                          | Параметры запроса                                                                                                                                                                                                                      | Ответ                                                                                                                                          |
| ------ | ----------------------------- | ------------------------------------------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ---------------------------------------------------------------------------------------------------------------------------------------------- |
| GET    | `/api/v1/search/suggestions`  | Получение подсказок (автозаполнение)              | `q` (string, обяз.)<br>`limit` (int, по умолчанию 5)                                                                                                                                                                                   | Массив подсказок: `{ text, type, id }`                                                                                                         |
| GET    | `/api/v1/search/items`        | Основной поиск товаров                            | `q` (string, обяз.)<br>`page` (int, по умолч.)<br>`size` (int, по умолч.)<br>`sort` (string: relevance, price\_asc, price\_desc, rating)<br>`filters` (JSON): `{ price_min, price_max, brands[], categories[], rating_min, in_stock }` | Объект `{ total, page, size, items[] }` где `items` — массив объектов товара с полями `{ id, name, price, rating, image_url, availability[] }` |
| GET    | `/api/v1/search/history`      | Получение истории поисковых запросов пользователя | — (JWT авторизация)                                                                                                                                                                                                                    | Массив строк последних запросов                                                                                                                |
| POST   | `/api/v1/search/history`      | Сохранение нового запроса в истории               | Тело: `{ query: string }`                                                                                                                                                                                                              | HTTP 201 Created                                                                                                                               |
| DELETE | `/api/v1/search/history/{id}` | Удаление записи из истории поиска                 | Path-параметр `id` — идентификатор записи                                                                                                                                                                                              | HTTP 204 No Content                                                                                                                            |

**8.3. Примеры запросов**

1. **Подсказки**

```http
GET /api/v1/search/suggestions?q=стол&limit=5 HTTP/1.1
Host: api.leroymerlin.ru
Authorization: Bearer eyJhb...
```

2. **Поиск товаров с фильтрацией**

```http
GET /api/v1/search/items?q=стул&page=1&size=20&sort=price_asc&filters={"price_min":1000,"price_max":5000,"brands":["IKEA","Leroy"],"in_stock":true} HTTP/1.1
Host: api.leroymerlin.ru
Authorization: Bearer eyJhb...
```

**8.4. Ошибки и коды ответа**

* `400 Bad Request` — неверный синтаксис запроса или параметры.
* `401 Unauthorized` — отсутствует или некорректный токен.
* `404 Not Found` — не найден ресурс (например, история по `id`).
* `500 Internal Server Error` — внутренняя ошибка сервера.

**8.5. Нагрузочные требования к API**

* Эндпоинт `/suggestions`: пиковая нагрузка до 500 RPS, p95 ≤200 мс.
* Эндпоинт `/items`: пиковая нагрузка до 1000 RPS, p95 ≤300 мс.
